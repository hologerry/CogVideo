import argparse
import math
import os

import lovely_tensors as lt
import torch

from sat.model.base_model import get_model
from sat.training.model_io import load_checkpoint
from tqdm import trange

from arguments import get_args
from diffusion_video import SATVideoDiffusionEngine
from sample_helpers import (
    blend_frames,
    check_inputs,
    get_batch,
    get_unique_embedder_keys_from_conditioner,
    load_fake_prefix_frames,
    load_frames,
    load_gt_prefix_frames,
    load_label,
    save_frames,
    save_video,
)


@torch.no_grad()
def sampling_main(args, model_cls):

    check_inputs(args.sdedit_frames_dir)
    os.makedirs(args.output_dir, exist_ok=True)

    ### Reading the frames
    prefix_frames_dir = args.sdedit_prefix_frames_dir
    prefix_start_idx = args.sdedit_prefix_start_idx
    prefix_num_frames = args.sdedit_prefix_num_frames

    labels_dir = args.sdedit_labels_dir

    frames_dir = args.sdedit_frames_dir
    start_idx = args.sdedit_start_idx
    num_frames = args.sdedit_num_frames
    sequence_name = args.sdedit_sequence_name
    view_idx = args.sdedit_view_idx
    ignore_input_fps = args.sdedit_ignore_input_fps
    prefix_frame_step = 2

    if args.sdedit_prefix_gt or view_idx == 0:
        # the prefix frames are ground truth
        # when the view_idx is 0, the prefix frames are also ground truth
        load_prefix_frames = load_gt_prefix_frames
    else:
        # the prefix frames are fake, generated by cogvxlora smoothed zero123 prediction
        zero123_cogvxlora_out = f"/data/Dynamics/cogvideox_lora_outputs_real_capture/5b_lora_all_sdedit_zero123"
        output_dir = f"zero123_finetune_15000_cam0to{view_idx}_cogvideox_5b_all_pred_single_prefix_one_merged"
        prefix_frames_dir = f"{zero123_cogvxlora_out}/{output_dir}"
        load_prefix_frames = load_fake_prefix_frames

    prefix_frames_tensor = load_prefix_frames(
        prefix_frames_dir,
        start_frame_idx=prefix_start_idx,
        num_frames=prefix_num_frames,
        view_idx=view_idx,
        ignore_fps=ignore_input_fps,
        frame_step=prefix_frame_step,
    )

    frame_idx_to_label_idx_offset = 0  # 20
    label_step = 10
    frame_batch_size = 2
    prefix_num_latent_frames = prefix_num_frames // 3
    print(f"prefix_num_latent_frames: {prefix_num_latent_frames}")

    cur_num_frames = num_frames - prefix_num_frames

    cur_frames_tensor = load_frames(
        frames_dir,
        start_frame_idx=start_idx,
        num_frames=cur_num_frames,
        view_idx=view_idx,
        ignore_fps=ignore_input_fps,
    )

    # blended_cur_frames_tensor = blend_frames(
    #     cur_frames_tensor,
    #     prefix_frames_tensor[-1],
    #     len(cur_frames_tensor),
    # )

    frames_tensor = prefix_frames_tensor + cur_frames_tensor
    # frames_tensor = prefix_frames_tensor + blended_cur_frames_tensor
    # frames_tensor = blended_cur_frames_tensor
    label_start_idx = prefix_start_idx

    prompt = load_label(
        labels_dir,
        start_frame_idx=(frame_idx_to_label_idx_offset + label_start_idx) // label_step * label_step,
        max_frame_idx=250,  # 110
        view_idx=view_idx,
        sequence_name=sequence_name,
    )

    out_fps = args.sampling_fps

    if isinstance(model_cls, type):
        model: SATVideoDiffusionEngine = get_model(args, model_cls)
    else:
        model: SATVideoDiffusionEngine = model_cls

    load_checkpoint(model, args)

    model.eval()
    device = model.device
    torch_dtype = model.dtype

    model = model.to(device)

    frames_tensor = torch.stack(frames_tensor, dim=0)
    frames_tensor = frames_tensor.to(torch_dtype)
    frames_tensor = frames_tensor.unsqueeze(0)  # B, T, C, H, W

    input_video_path = f"{args.output_dir}/input_sfi{start_idx}_nf{num_frames}_v{view_idx}_fps{out_fps}.mp4"
    save_video(frames_tensor.float(), input_video_path, fps=out_fps)

    input_frames_path = f"{args.output_dir}/input_sfi{start_idx}_nf{num_frames}_v{view_idx}_fps{out_fps}_frames"
    os.makedirs(input_frames_path, exist_ok=True)
    save_frames(frames_tensor.float().squeeze(0), input_frames_path)

    frames_tensor_norm = frames_tensor * 2.0 - 1.0

    ### Prepare the model for sampling
    sdedit_strength = 1.0  # 1.0 means full sampling (all sigmas are returned)
    if args.sdedit_strength is not None:
        sdedit_strength = args.sdedit_strength
        assert (
            isinstance(sdedit_strength, float) and 0.0 <= sdedit_strength <= 1.0
        ), f"Invalid sdedit_strength: {sdedit_strength}"

    image_size = [480, 720]

    # number of prefix frames, latent
    cur_sampling_frames = args.sampling_num_frames

    T, H, W, C, F = cur_sampling_frames, image_size[0], image_size[1], args.latent_channels, 8
    num_samples = [1]
    force_uc_zero_embeddings = ["txt"]

    value_dict = {
        "prompt": prompt,
        "negative_prompt": "",
        "num_frames": torch.tensor(T).unsqueeze(0),
    }

    batch, batch_uc = get_batch(
        get_unique_embedder_keys_from_conditioner(model.conditioner),
        value_dict,
        num_samples,
    )
    for key in batch:
        if isinstance(batch[key], torch.Tensor):
            print(key, batch[key].shape)
        elif isinstance(batch[key], list):
            print(key, [len(l) for l in batch[key]])
        else:
            print(key, batch[key])
    c, uc = model.conditioner.get_unconditional_conditioning(
        batch,
        batch_uc=batch_uc,
        force_uc_zero_embeddings=force_uc_zero_embeddings,
    )

    for k in c:
        if not k == "crossattn":
            c[k], uc[k] = map(lambda y: y[k][: math.prod(num_samples)].to("cuda"), (c, uc))

    # Offload the model from GPU to save GPU memory
    model.to("cpu")
    torch.cuda.empty_cache()
    model.first_stage_model.to(device)
    # B, T, C, H, W -> B, C, T, H, W
    frames_tensor_norm = frames_tensor_norm.permute(0, 2, 1, 3, 4).contiguous().to(device)

    # batch is not used in `encode_first_stage` method
    frames_z = model.encode_first_stage(frames_tensor_norm, batch)
    # B, C, T, H, W -> B, T, C, H, W
    frames_z = frames_z.permute(0, 2, 1, 3, 4).contiguous()
    assert frames_z.shape == (1, T, C, H // F, W // F), f"Encoded frames_z shape: {frames_z.shape} not correct"

    prefix_frames_z = frames_z[:, :prefix_num_latent_frames].detach().clone()

    # print(f"prefix_frames_z shape: {prefix_frames_z.shape}")

    # Unload the first stage model from GPU to save GPU memory
    model.to(device)
    model.first_stage_model.to("cpu")

    samples_z = model.sample(
        c,
        uc=uc,
        batch_size=1,
        shape=(T, C, H // F, W // F),
        frames_z=frames_z,
        sdedit_strength=sdedit_strength,
        prefix_clean_frames=prefix_frames_z,
    )
    # keeped_clean_samples_z = samples_z[:, -keep_n_clean_samples:].detach().clone()

    # B, T, C, H, W -> B, C, T, H, W
    samples_z = samples_z.permute(0, 2, 1, 3, 4).contiguous()

    # Unload the model from GPU to save GPU memory
    model.to("cpu")
    torch.cuda.empty_cache()
    model.first_stage_model.to(device)
    # first_stage_model = model.first_stage_model
    # first_stage_model = first_stage_model.to(device)

    latent = 1.0 / model.scale_factor * samples_z

    ## Decode latent serial to save GPU memory
    recons = []
    loop_num = T // frame_batch_size  # 2 is vae decoding frame batch size
    remaining_frames = T % frame_batch_size

    print(f"loop_num: {loop_num}, remaining_frames: {remaining_frames}")

    # drop the last batch frame, as it is the same as the first frame in the next batch
    # this is important, as we keep the context cache in vae, if we decode, the context cache mismatch

    for i in trange(loop_num, desc="Decoding"):
        start_frame = frame_batch_size * i + (0 if i == 0 else remaining_frames)
        end_frame = frame_batch_size * (i + 1) + remaining_frames

        if i == loop_num - 1:
            clear_fake_cp_cache = True
        else:
            clear_fake_cp_cache = False

        recon = model.first_stage_model.decode(
            latent[:, :, start_frame:end_frame].contiguous(),
            clear_fake_cp_cache=clear_fake_cp_cache,
        )

        recons.append(recon)

    recon = torch.cat(recons, dim=2).to(torch.float32)
    # B, C, T, H, W -> B, T, C, H, W
    samples_x = recon.permute(0, 2, 1, 3, 4).contiguous()
    samples = torch.clamp((samples_x + 1.0) / 2.0, min=0.0, max=1.0).cpu()

    basename = f"prefix_view{view_idx}_start{start_idx:03d}_frames{num_frames}_strength{sdedit_strength}"
    basename = basename.replace(".", "d").replace("-", "n")
    output_video_path = os.path.join(args.output_dir, f"{basename}.mp4")
    output_frames_path = os.path.join(args.output_dir, f"{basename}_frames")
    os.makedirs(output_frames_path, exist_ok=True)
    save_frames(samples.squeeze(0), output_frames_path)
    save_video(samples, output_video_path, fps=out_fps)
    print(f"Saved video to {output_video_path}")
    print(f"Saved frames to {output_frames_path}")


if __name__ == "__main__":
    lt.monkey_patch()
    if "OMPI_COMM_WORLD_LOCAL_RANK" in os.environ:
        os.environ["LOCAL_RANK"] = os.environ["OMPI_COMM_WORLD_LOCAL_RANK"]
        os.environ["WORLD_SIZE"] = os.environ["OMPI_COMM_WORLD_SIZE"]
        os.environ["RANK"] = os.environ["OMPI_COMM_WORLD_RANK"]
    py_parser = argparse.ArgumentParser(add_help=False)
    known, args_list = py_parser.parse_known_args()

    args = get_args(args_list)
    args = argparse.Namespace(**vars(args), **vars(known))
    del args.deepspeed_config
    args.model_config.first_stage_config.params.cp_size = 1
    args.model_config.network_config.params.transformer_args.model_parallel_size = 1
    args.model_config.network_config.params.transformer_args.checkpoint_activations = False
    args.model_config.loss_fn_config.params.sigma_sampler_config.params.uniform_sampling = False

    sampling_main(args, model_cls=SATVideoDiffusionEngine)
